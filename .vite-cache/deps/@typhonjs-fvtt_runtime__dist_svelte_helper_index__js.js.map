{
  "version": 3,
  "sources": ["../../node_modules/@typhonjs-fvtt/runtime/node_modules/@typhonjs-fvtt/svelte/src/helper/legacy/radioBoxes.js", "../../node_modules/@typhonjs-fvtt/runtime/node_modules/@typhonjs-fvtt/svelte/src/helper/legacy/selectOptions.js", "../../node_modules/@typhonjs-fvtt/runtime/node_modules/@typhonjs-fvtt/svelte/src/helper/localize.js"],
  "sourcesContent": ["/**\r\n * A helper to create a set of radio checkbox input elements in a named set.\r\n * The provided keys are the possible radio values while the provided values are human readable labels.\r\n *\r\n * @param {string} name         The radio checkbox field name\r\n *\r\n * @param {object} choices      A mapping of radio checkbox values to human readable labels\r\n *\r\n * @param {object} options      Options which customize the radio boxes creation\r\n *\r\n * @param {string} options.checked    Which key is currently checked?\r\n *\r\n * @param {boolean} options.localize  Pass each label through string localization?\r\n *\r\n * @returns {string} HTML for radio boxes.\r\n *\r\n * @example <caption>The provided input data</caption>\r\n * let groupName = \"importantChoice\";\r\n * let choices = {a: \"Choice A\", b: \"Choice B\"};\r\n * let chosen = \"a\";\r\n *\r\n * @example <caption>The template HTML structure</caption>\r\n * <div class=\"form-group\">\r\n *   <label>Radio Group Label</label>\r\n *   <div class=\"form-fields\">\r\n *     {@html radioBoxes(groupName, choices, { checked: chosen, localize: true})}\r\n *   </div>\r\n * </div>\r\n */\r\nexport function radioBoxes(name, choices, options)\r\n{\r\n   const checked = options['checked'] || null;\r\n   const localize = options['localize'] || false;\r\n   let html = '';\r\n\r\n   for (let [key, label] of Object.entries(choices)) // eslint-disable-line prefer-const\r\n   {\r\n      if (localize) { label = game.i18n.localize(label); }\r\n      const isChecked = checked === key;\r\n      html += `<label class=\"checkbox\"><input type=\"radio\" name=\"${name}\" value=\"${key}\" ${\r\n       isChecked ? 'checked' : ''}> ${label}</label>`;\r\n   }\r\n\r\n   return html;\r\n}\r\n", "/**\r\n * Converts the `selectOptions` Handlebars helper to be Svelte compatible. This is useful when initially converting\r\n * over an app to Svelte and for essential usage to several dialogs that mirror the core Foundry experience. For\r\n * an example of usage see {@link TJSFolderPermissions}.\r\n *\r\n * A helper to create a set of <option> elements in a <select> block based on a provided dictionary.\r\n * The provided keys are the option values while the provided values are human-readable labels.\r\n * This helper supports both single-select as well as multi-select input fields.\r\n *\r\n * @param {object} choices                     A mapping of radio checkbox values to human readable labels\r\n *\r\n * @param {object} options                     Helper options\r\n *\r\n * @param {string|string[]} [options.selected] Which key or array of keys that are currently selected?\r\n *\r\n * @param {boolean} [options.localize=false]   Pass each label through string localization?\r\n *\r\n * @param {string} [options.blank]             Add a blank option as the first option with this label\r\n *\r\n * @param {string} [options.nameAttr]          Look up a property in the choice object values to use as the option value\r\n *\r\n * @param {string} [options.labelAttr]         Look up a property in the choice object values to use as the option label\r\n *\r\n * @param {boolean} [options.inverted=false]   Use the choice object value as the option value, and the key as the label\r\n *                                             instead of vice-versa\r\n *\r\n * @returns {string} The <options> HTML element(s).\r\n *\r\n * @example <caption>The provided input data</caption>\r\n * let choices = {a: 'Choice A', b: 'Choice B'};\r\n * let value = 'a';\r\n *\r\n * @example <caption>The template HTML structure</caption>\r\n * <select name=\"importantChoice\">\r\n *   {@html selectOptions(choices { selected: value, localize: true })}\r\n * </select>\r\n *\r\n * @example <caption>The resulting HTML</caption>\r\n * <select name=\"importantChoice\">\r\n *   <option value=\"a\" selected>Choice A</option>\r\n *   <option value=\"b\">Choice B</option>\r\n * </select>\r\n *\r\n * @example <caption>Using inverted</caption>\r\n * let choices = {'Choice A': 'a', 'Choice B': 'b'};\r\n * let value = 'a';\r\n *\r\n * @example <caption>The template HTML structure</caption>\r\n * <select name=\"importantChoice\">\r\n *   {@html selectOptions(choices, { selected: value, inverted: true })}\r\n * </select>\r\n *\r\n * @example <caption>Using nameAttr and labelAttr with objects</caption>\r\n * let choices = {foo: {key: 'a', label: 'Choice A'}, bar: {key: 'b', label: 'Choice B'}};\r\n * let value = 'b';\r\n *\r\n * @example <caption>The template HTML structure</caption>\r\n * <select name=\"importantChoice\">\r\n *   {@html selectOptions(choices, { selected: value, nameAttr: 'key', labelAttr: 'label' })}\r\n * </select>\r\n *\r\n * @example <caption>Using nameAttr and labelAttr with arrays</caption>\r\n * let choices = [{key: 'a', label: 'Choice A'}, {key: 'b', label: 'Choice B'}];\r\n * let value = 'b';\r\n *\r\n * @example <caption>The template HTML structure</caption>\r\n * <select name=\"importantChoice\">\r\n *   {@html selectOptions(choices, { selected: value, nameAttr: 'key', labelAttr: 'label' })}\r\n * </select>\r\n */\r\nexport function selectOptions(choices, options)\r\n{\r\n   const localize = options['localize'] ?? false;\r\n   let selected = options['selected'] ?? null;\r\n   const blank = options['blank'] ?? null;\r\n   const nameAttr = options['nameAttr'];\r\n   const labelAttr = options['labelAttr'];\r\n   const inverted = !!options['inverted'];\r\n\r\n   selected = selected instanceof Array ? selected.map(String) : [String(selected)];\r\n\r\n   // Create an option\r\n   const option = (name, label) =>\r\n   {\r\n      if (localize) { label = game.i18n.localize(label); }\r\n      const isSelected = selected.includes(String(name));\r\n\r\n      html += `<option value=\"${name}\" ${isSelected ? \"selected\" : \"\"}>${label}</option>`;\r\n   };\r\n\r\n   // Create the options\r\n   let html = '';\r\n   if (blank !== null) { option('', blank); }\r\n\r\n   // Options as an Array\r\n   if (choices instanceof Array)\r\n   {\r\n      for (const choice of choices) { option(choice[nameAttr], choice[labelAttr]); }\r\n   }\r\n\r\n   // Choices as an Object\r\n   else\r\n   {\r\n      for (const choice of Object.entries(choices))\r\n      {\r\n         let [key, value] = inverted ? choice.reverse() : choice;\r\n         if (nameAttr) { key = value[nameAttr]; }\r\n         if (labelAttr) { value = value[labelAttr]; }\r\n         option(key, value);\r\n      }\r\n   }\r\n\r\n   return html;\r\n}\r\n", "/**\r\n * Localize a string including variable formatting for input arguments. Provide a string ID which defines the localized\r\n * template. Variables can be included in the template enclosed in braces and will be substituted using those named\r\n * keys.\r\n *\r\n * @param {string}   stringId - The string ID to translate.\r\n *\r\n * @param {object}   [data] - Provided input data.\r\n *\r\n * @returns {string} The translated and formatted string\r\n */\r\nexport function localize(stringId, data)\r\n{\r\n   const result = typeof data !== 'object' ? game.i18n.localize(stringId) : game.i18n.format(stringId, data);\r\n   return result !== void 0 ? result : '';\r\n}"],
  "mappings": ";;;AA6BO,SAAS,WAAW,MAAM,SAAS,SAC1C;AACG,QAAM,UAAU,QAAQ,cAAc;AACtC,QAAMA,YAAW,QAAQ,eAAe;AACxC,MAAI,OAAO;AAEX,WAAS,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,GAC/C;AACG,QAAIA,WAAU;AAAE,cAAQ,KAAK,KAAK,SAAS,KAAK;IAAE;AAClD,UAAM,YAAY,YAAY;AAC9B,YAAQ,qDAAqD,gBAAgB,QAC5E,YAAY,YAAY,OAAO;EACtC;AAEG,SAAO;AACV;AC0BO,SAAS,cAAc,SAAS,SACvC;ADvEA;ACwEG,QAAMA,aAAW,aAAQ,gBAAR,YAAuB;AACxC,MAAI,YAAW,aAAQ,gBAAR,YAAuB;AACtC,QAAM,SAAQ,aAAQ,aAAR,YAAoB;AAClC,QAAM,WAAW,QAAQ;AACzB,QAAM,YAAY,QAAQ;AAC1B,QAAM,WAAW,CAAC,CAAC,QAAQ;AAE3B,aAAW,oBAAoB,QAAQ,SAAS,IAAI,MAAM,IAAI,CAAC,OAAO,QAAQ,CAAC;AAG/E,QAAM,SAAS,CAAC,MAAM,UACtB;AACG,QAAIA,WAAU;AAAE,cAAQ,KAAK,KAAK,SAAS,KAAK;IAAE;AAClD,UAAM,aAAa,SAAS,SAAS,OAAO,IAAI,CAAC;AAEjD,YAAQ,kBAAkB,SAAS,aAAa,aAAa,MAAM;EACzE;AAGG,MAAI,OAAO;AACX,MAAI,UAAU,MAAM;AAAE,WAAO,IAAI,KAAK;EAAE;AAGxC,MAAI,mBAAmB,OACvB;AACG,eAAW,UAAU,SAAS;AAAE,aAAO,OAAO,WAAW,OAAO,UAAU;IAAE;EAClF,OAIG;AACG,eAAW,UAAU,OAAO,QAAQ,OAAO,GAC3C;AACG,UAAI,CAAC,KAAK,KAAK,IAAI,WAAW,OAAO,QAAO,IAAK;AACjD,UAAI,UAAU;AAAE,cAAM,MAAM;MAAU;AACtC,UAAI,WAAW;AAAE,gBAAQ,MAAM;MAAW;AAC1C,aAAO,KAAK,KAAK;IAC1B;EACA;AAEG,SAAO;AACV;ACtGO,SAAS,SAAS,UAAU,MACnC;AACG,QAAM,SAAS,OAAO,SAAS,WAAW,KAAK,KAAK,SAAS,QAAQ,IAAI,KAAK,KAAK,OAAO,UAAU,IAAI;AACxG,SAAO,WAAW,SAAS,SAAS;AACvC;",
  "names": ["localize"]
}
