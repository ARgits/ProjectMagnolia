// vite.config.mjs
import { svelte } from "@sveltejs/vite-plugin-svelte";
import resolve from "@rollup/plugin-node-resolve";
import preprocess from "svelte-preprocess";
import { postcssConfig, terserConfig, typhonjsRuntime } from "@typhonjs-fvtt/runtime/rollup";

var __vite_injected_original_dirname = "C:\\Users\\vab\\AppData\\Local\\FoundryVTT\\Data\\systems\\ard20";
var s_COMPRESS = false;
var s_SOURCEMAPS = true;
var s_TYPHONJS_MODULE_LIB = false;
var s_RESOLVE_CONFIG = {
    browser: true,
    dedupe: ["svelte"]
};
var vite_config_default = () => {
    return {
        root: "built/",
        base: "/systems/ard20/",
        publicDir: false,
        cacheDir: "../.vite-cache",
        resolve: { conditions: ["import", "browser"] },
        esbuild: {
            target: ["es2022", "chrome100"],
            keepNames: true
        },
        css: {
            postcss: postcssConfig({ compress: s_COMPRESS, sourceMap: s_SOURCEMAPS })
        },
        server: {
            port: 30001,
            open: "/game",
            proxy: {
                ["^(/systems/ard20/lang)"]: "http://localhost:30000",
                ["^(?!/systems/ard20/)"]: "http://localhost:30000",
                "/socket.io": { target: "ws://localhost:30000", ws: true }
            }
        },
        build: {
            outDir: __vite_injected_original_dirname,
            emptyOutDir: false,
            sourcemap: s_SOURCEMAPS,
            brotliSize: true,
            minify: s_COMPRESS ? "terser" : false,
            target: ["es2022", "chrome100"],
            terserOptions: s_COMPRESS ? { ...terserConfig(), ecma: 2022 } : void 0,
            lib: {
                entry: "./ard20.js",
                formats: ["es"],
                fileName: "ard20"
            }
        },
        plugins: [
            svelte({
                preprocess: preprocess(),
                onwarn: (warning, handler) => {
                    if (warning.message.includes(`<a> element should have an href attribute`)) {
                        return;
                    }
                    handler(warning);
                }
            }),
            resolve(s_RESOLVE_CONFIG),
            s_TYPHONJS_MODULE_LIB && typhonjsRuntime()
        ]
    };
};
export {
    vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
